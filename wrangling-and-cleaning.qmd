---
title: "wrangling-and-cleaning"
author: "Daya Muralidharan"
format: html
---

## Load Libraries

```{r}
library(dplyr)
library(tidyr)
library(readr)
```


## Load Data

bit.ly/data-wrangle-lesson-data

```{r}
catch_original <- read_csv("https://knb.ecoinformatics.org/knb/d1/mn/v2/object/df35b.302.1")
```

## Data Cleaning & Wrangling


## Initial Data Exploration

```{r}
colnames(catch_original)
```

```{r}
# first 6 lines of the data
head(catch_original)
```

```{r}
summary(catch_original)
```

```{r}
unique(catch_original$Region)
```

```{r}
#view(catch_original)
```


## Pipe Operator

Takes the output of one function and puts it as input in the next

## Select Columns

GOAL: Remove 'All' and 'notesRegCode' columns
```{r}
catch_data <- catch_original %>%
  select("Region","Year","Chinook","Sockeye","Coho","Pink","Chum")
```

```{r}
catch_original %>% select(-All,-notesRegCode)
```


## Quality Check

```{r}
dplyr::glimpse(catch_data)
```

## Change column content

GOAL: convert the Chinook catch values to 'numeric' and overwrite the old Chinnok column

```{r}
catch_clean <- catch_data %>%
  mutate(Chinook = as.numeric(Chinook))
```


## Find the row with the 'NA' value

```{r}
which(is.na(catch_clean$Chinook))
```
## Rewriet this with a pipe operator

```{r}
i <- catch_clean %>%
  select(Chinook) %>% 
  is.na() %>% 
  which()
```

```{r}
catch_data[i,]
```


GOAL: change the value(s) of the 'Chinook' column to 1 if the value is equal to the letter I

```{r}
catch_clean <- catch_data %>% 
  mutate(Chinook = 
           if_else(condition = Chinook == "I",
                   true = "1",
                   false = Chinook))
```


```{r}
catch_clean[i,]
```

```{r}
catch_clean <- catch_data %>% 
  mutate(Chinook = 
           if_else(condition = Chinook == "I",
                   true = "1",
                   false = Chinook),
          Chinook = as.numeric(Chinook))
head(catch_clean)
```


## 'pivot_longer()' and pivot_wider()'

GOAL: transform data from wide format to a long format

```{r}
catch_long <- catch_clean %>% 
  # pivot longer all columns except Region and Year
  pivot_longer(
    cols = -c(Region, Year),
    names_to = "species",
    values_to = "catch"
  )

View(catch_long)
```


```{r}
View(catch_long)
catch_long %>% 
  pivot_wider(names_from = species,
              values_from = catch)
?pivot_wider
View(catch_long)
```


## Renaming columns

GOAL: rename the 'catch' column to be called 'catch thousands'

```{r}
catch_long <- catch_long %>% 
  rename(catch_thousands = catch)

head(catch_long)
```


## Adding columns with 'mutate()'

Goal: Creare a column 'catch' with units of fish, instead of thousands of fish

```{r}
catch_long <- catch_long %>% 
  mutate(catch = catch_thousands * 1000)

head(catch_long)
```


GOAL: remove 'catch_thousands' column

```{r}
catch_long <- catch_long %>% 
  select(-catch_thousands)

head(catch_long)
```


## Summary Statistics

Goal: getting the average catch per region

bit.ly/3ppGUsQ


```{r}
mean_region <- catch_long %>% 
  group_by(Region) %>%
  summarize(mean_catch=mean(catch))

head(mean_region)
```


## 'filter()'

Goal: go back to our 'catch_long' data frame and select all the rows from the SSE region

```{r}
sse_catch <- catch_long %>% 
  filter(Region == "SSE")

head(sse_catch)
```

Quick exercise:
1. filter to catches over one million fish
2. select rows from the SSE region that have information about Chinook salmon

```{r}
catch_long %>% 
  filter(catch >= 1000)

```

```{r}
catch_long %>% 
  filter(Region == "SSE" & species == "Chinook")
```


## Sorting data

Goal: re-calculate mean catch by region, and then sort the output by mean catch

```{r}
mean_region <- catch_long %>% 
  group_by(Region) %>% 
  summarize(mean_catch = mean(catch)) %>% 
  arrange(mean_catch)

head(mean_region)
```

Order them in descending order

```{r}
mean_region <- catch_long %>% 
  group_by(Region) %>% 
  summarize(mean_catch = mean(catch)) %>% 
  arrange(desc(mean_catch))

head(mean_region)
```


## 'separate()' and 'unite()'

```{r}
sites_df <- data.frame(site = c("HAW-101",
                                "HAW-103",
                                "OAH-320",
                                "OAH-219",
                                "MAI-039"))

df <- sites_df %>% 
  separate(site, c("island","site_number"), "-")
```

```{r}
df %>% 
  unite(code, island, site_number, sep = "-")
```

